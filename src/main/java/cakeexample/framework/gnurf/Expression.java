package cakeexample.framework.gnurf;

import cakeexample.framework.domain.AbstractField;
import cakeexample.framework.domain.Field;
import fj.F;
import fj.P2;
import fj.data.List;
import fj.data.hlist.HList;

import java.sql.ResultSet;
import java.util.Optional;

import static cakeexample.framework.gnurf.Tuple.Tuple2;
import static cakeexample.framework.util.Throwables.propagate;
import static fj.data.hlist.HList.*;
import static fj.data.vector.V2.p;

public class Expression<C> {
    private final DbUtil dbUtil;
    private final Table<C> table;

    public Expression(DbUtil dbUtil, Table<C> table) {
        this.dbUtil = dbUtil;
        this.table = table;
    }

    public List<C> selectAll() {
        return dbUtil.select(table.name, (ResultSet r) -> {
            //noinspection unchecked
            // Column<?, ?> -> Value
            return table.entityConstructor.apply(table.columns.map(c -> doh(r, c)));
        });
    }

    private <V> AbstractField<C, V> doh(ResultSet r, Column<C, V> c) {
        return dbUtil.columnMapper(c).f(r, c);
    }

    public C update(C c) {
        throw new RuntimeException("Not implemented");
    }

    public InsertContinuation insert(C entity) {
        return new InsertContinuation(dbUtil.insert(table.name, table.columns.map(c -> harmoniseTypes(c, entity))));
    }

    private static <C, V> Column<C, V> harmoniseTypes(Column<C, V> c, C entity) {
        return c.withField(c.field.as(c.field.getter().get().f(entity)));
    }

//    class FColumnToField<V> implements F<Column<?, V>, AbstractField<?, V>> {
//        private final ResultSet r;
//
//        public FColumnToField(ResultSet r) {
//            this.r = r;
//        }
//
//        @Override
//        public AbstractField<?, V> f(Column<?, V> c) {
//            return c.field.as(getValue(r, c));
//        }
//    }

    public class InsertContinuation {
        public final Optional<Long> autogeneratedKey;

        public InsertContinuation(Optional<Long> autogeneratedKey) {
            this.autogeneratedKey = autogeneratedKey;
        }

        public C retrieve() {
            throw new RuntimeException("Not implemented");
        }
    }

}
